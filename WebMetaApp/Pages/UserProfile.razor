@page "/users/profile/{id:int?}"
@attribute [Microsoft.AspNetCore.Authorization.Authorize]

@using LibMetaApp.Services
@using Refit
@using LibMetaApp.Models
@using LibMetaApp

@inject IClientSession SessionLocalStorage
@inject SessionMarkerLiteModel SessionMarker
@inject CustomAuthStateProvider authState
@inject LibMetaApp.Services.IUsersProfileRefitApi UsersProfileService
@inject ILogger<UserProfile> Logger
@inherits BlazorBusyComponentBaseModel

@{
    if (IsBusyProgress == true)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Загрузка...</span>
            </div>
        </div>
    }
    else
    {
        if (user_profile_result.ConfirmationType == ConfirmationUsersTypesEnum.None)
        {
            <div class="alert alert-danger" role="alert">
                <h4 class="alert-heading">Не подтверждено!</h4>
                <p>Email вашей учётной записи не подвтерждён. Ваша учётная запись будет ограничена до тех пор, пока вы не подвтерджите свою электроную почту.</p>
                <hr>
                <p>После регистрации учётной записи - вам было отправлено предложение подвтердить её. Если вы не получали письма, можете <a href="#" @onclick="RenewConfirmRegistration">повторно запросить новый токен подвтерждения</a></p>
            </div>
        }

        <EditForm Model="@user_profile_result">
            <fieldset>
                <legend><h3>Профиль <sup># @user_profile_result.Id</sup></h3></legend>
                <div class="mb-3">
                    <label for="exampleInputEmail1" class="form-label">Email</label>
                    <InputText type="email" class="form-control" id="exampleInputEmail1" @bind-Value="user_profile_result.Email" aria-describedby="emailHelp" readonly />
                    <div id="emailHelp" class="form-text">Контактный Email. Не отображается публично.</div>
                </div>
                <div class="mb-3">
                    <label for="exampleInputLogin" class="form-label">Login</label>
                    <InputText class="form-control" id="exampleInputLogin" @bind-Value="user_profile_result.Login" aria-describedby="loginHelp" readonly />
                    <div id="loginHelp" class="form-text">Login для входа. Не отображается публично.</div>
                </div>
                <div class="mb-3">
                    <label for="exampleInputName" class="form-label">Имя</label>
                    <InputText class="form-control" id="exampleInputName" @bind-Value="user_profile_result.Name" aria-describedby="nameHelp" readonly />
                    <div id="nameHelp" class="form-text">Публичное имя. Как видят вас другие пользователи.</div>
                </div>
                <div class="input-group">
                    <span class="input-group-text">Статус</span>
                    <InputText class="form-control" id="exampleInputLevel" aria-label="Уровень доступа пользователя" title="Уровень доступа пользователя" @bind-Value="@AccessLevelUser" readonly />
                    <InputText class="form-control" id="exampleConfirmationType" aria-label="Метод подтверждения статуса" title="Метод подтверждения статуса" @bind-Value="@ConfirmationType" readonly />
                </div>
            </fieldset>
            <div class="mb-3">
                <label for="exampleInputPassword1" class="form-label">Password</label>
                <input type="password" class="form-control" id="exampleInputPassword1">
            </div>


        </EditForm>
    }
}
@code {
    [Parameter] public int? id { get; set; }
    private UserLiteModel? user_profile_result = null;
    string AccessLevelUser;
    string ConfirmationType;

    private async Task RenewConfirmRegistration()
    {

    }

    protected override async void OnInitialized()
    {
        await GetUserProfile();
    }

    private async Task GetUserProfile()
    {
        IsBusyProgress = true;

        try
        {
            ApiResponse<GetUserProfileResponseModel> rest = await UsersProfileService.GetUserProfileAsync(id.GetValueOrDefault(0));
            if (rest.StatusCode != System.Net.HttpStatusCode.OK)
            {
                Logger.LogError($"HTTP error: [code={rest.StatusCode}] {rest?.Error?.Content}");
                IsBusyProgress = false;

                await UserLogout();

                return;
            }
            GetUserProfileResponseModel result = rest?.Content;
            if (!result.IsSuccess)
            {
                Logger.LogError(result.Message);
                IsBusyProgress = false;

                await UserLogout();

                return;
            }
            user_profile_result = result.User;
            AccessLevelUser = $"Level: {user_profile_result.AccessLevelUser}";
            ConfirmationType = $"Confirm: {user_profile_result.ConfirmationType}";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error {nameof(UsersProfileService.GetUserProfileAsync)}");
            IsBusyProgress = false;
            return;
        }

        IsBusyProgress = false;
        StateHasChanged();
    }

    private async Task UserLogout()
    {
        IsBusyProgress = true;
        ResponseBaseModel? res = await SessionLocalStorage.LogoutAsync();

        if (!string.IsNullOrEmpty(res?.Message))
        {
            if (res.IsSuccess)
                Logger.LogInformation(res?.Message);
            else
                Logger.LogError(res?.Message);
        }

        authState.AuthenticationStateChanged();
        IsBusyProgress = false;
    }
}
