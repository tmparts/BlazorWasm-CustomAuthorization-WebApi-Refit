@using LibMetaApp.Models
@using Refit
@using Microsoft.Extensions.Logging
@using LibMetaApp
@using Microsoft.Extensions.Options
@inject CustomAuthStateProvider authState
@inject ISessionLocalStorage SessionLocalStorage
@inject SessionMarkerLiteModel SessionMarker
@inject LibMetaApp.Services.IUsersAuthApi UsersAuthService
@inject ILogger<UserLoginForm> Logger
@inject IOptions<ClientConfigModel> Config

<h3>Вход</h3>
<EditForm Model="@user_auth_obj" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label class="form-label" for="login">Login</label>
        <InputText class="form-control" id="login" aria-describedby="loginHelp" @bind-Value="user_auth_obj.Login" />
        <div class="form-text" id="loginHelp">Enter your login</div>
    </div>
    <div class="mb-3">
        <label class="form-label" for="password">Password</label>
        <InputText class="form-control" type="password" placeholder="Password" id="name" @bind-Value="user_auth_obj.Password" />
    </div>
    <div class="mb-3 form-check">
        <InputCheckbox @bind-Value="user_auth_obj.RememberMe" class="form-check-input" id="RememberMe" />
        <label class="form-check-label" for="RememberMe">Запомнить меня</label>
    </div>
    <div class="alert alert-secondary" role="alert">Нет учётной записи? <a href=@($"/{GlobalStaticConstants.AUTHENTICATION_CONTROLLER_NAME}/{GlobalStaticConstants.REGISTRATION_ACTION_NAME}")>Регистрация!</a>. Забыли логин/пароль? <a href=@($"/{GlobalStaticConstants.AUTHENTICATION_CONTROLLER_NAME}/{GlobalStaticConstants.RESTORE_ACTION_NAME}")>Восстановить доступ!</a></div>
    <button class="btn btn-primary" type="submit">
        @{
            if (InRestProgress == true)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <text> Загрузка...</text>
            }
            else
            {
                <text>Войти</text>
            }
        }
    </button>
    @{
        if (!string.IsNullOrWhiteSpace(user_auth_result?.Message))
        {
            <p></p>
            <div class="alert alert-danger" role="alert">
                @user_auth_result.Message
            </div>
        }
    }
</EditForm>
@code {
    private UserAuthorizationModel user_auth_obj = new();
    private AuthUserResultModel? user_auth_result = null;
    private bool InRestProgress = false;

    private async Task HandleValidSubmit()
    {
        InRestProgress = true;
        await SessionLocalStorage.RemoveSessionAsync();
        ApiResponse<AuthUserResultModel> auth_result = await UsersAuthService.LoginUser(user_auth_obj);
        user_auth_result = auth_result?.Content;

        if (user_auth_result?.IsSuccess == true)
        {
            SessionMarker.Reload(user_auth_result.SessionMarker.Login, user_auth_result.SessionMarker.AccessLevelUser, user_auth_result.SessionMarker.Token);
            await SessionLocalStorage.SaveSessionAsync(SessionMarker);
        }
        InRestProgress = false;
        authState.StateChanged();
    }
}
