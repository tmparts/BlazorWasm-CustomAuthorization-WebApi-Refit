@using LibMetaApp.Models
@using Refit
@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.Components.Authorization
@using LibMetaApp
@using Microsoft.Extensions.Options
@using LibMetaApp.Services
@inherits BlazorReCaptchaComponentBaseModel

@inject CustomAuthStateProvider authState
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISessionLocalStorage SessionLocalStorage
@inject LibMetaApp.Services.IUsersAuthApi UsersAuthService
@inject SessionMarkerLiteModel SessionMarker
@inject ILogger<UserRegistrationForm> Logger
@inject ClientConfigModel Config

<h3>Регистрация</h3>
<EditForm Model="@user_registration_obj" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label class="form-label" for="login">Login</label>
        <InputText class="form-control" id="login" aria-describedby="loginHelp" @bind-Value="user_registration_obj.Login" />
        <div class="form-text" id="loginHelp">Enter your login</div>
    </div>
    <div class="mb-3">
        <label class="form-label" for="password">Password</label>
        <InputText class="form-control" type="password" placeholder="Password" id="password" @bind-Value="user_registration_obj.Password" />
    </div>
    <div class="mb-3">
        <label class="form-label" for="password_confirm">Confirm password</label>
        <InputText class="form-control" type="password" placeholder="Confirm password" id="password_confirm" @bind-Value="user_registration_obj.PasswordConfirm" />
    </div>
    <div class="mb-3">
        <label class="form-label" for="email">Email</label>
        <InputText type="email" class="form-control" id="email" aria-describedby="emailHelp" @bind-Value="user_registration_obj.Email" />
        <div class="form-text" id="emailHelp">Enter your email</div>
    </div>
    <div class="mb-3">
        <label class="form-label" for="name">Public name</label>
        <InputText type="name" class="form-control" id="name" aria-describedby="loginName" @bind-Value="user_registration_obj.PublicName" />
        <div class="form-text" id="loginName">Enter your public Name</div>
    </div>
    <ReCAPTCHA ReCaptchaExpiredCallback="@OnReCaptchaExpired" ReCaptchaSuccessCallback="@OnReCaptchaSuccess" />

    <div class="alert alert-secondary" role="alert">Есть учётная запись? <a href=@($"/{GlobalStaticConstants.AUTHENTICATION_CONTROLLER_NAME}/{GlobalStaticConstants.LOGIN_ACTION_NAME}")>Войти</a>. Забыли логин/пароль? <a href=@($"/{GlobalStaticConstants.AUTHENTICATION_CONTROLLER_NAME}/{GlobalStaticConstants.RESTORE_ACTION_NAME}")>Восстановить доступ</a>.</div>

    <button class="btn btn-primary" type="submit" disabled="@InRestProgress">
        @{
            if (InRestProgress == true)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                <text> Загрузка...</text>
            }
            else
            {
                <text>Регистрация</text>
            }
        }
    </button>
    @{
        if (!string.IsNullOrWhiteSpace(user_registration_result?.Message))
        {
            <p></p>
            <div class="alert alert-danger" role="alert">
                @user_registration_result.Message
            </div>
        }
    }
</EditForm>
@code {
    private UserRegistrationModel user_registration_obj = new();
    private AuthUserResultModel? user_registration_result = null;
    
    public override void OnReCaptchaExpired()
    {
        user_registration_obj.ResponseReCAPTCHA = string.Empty;
        Logger.LogDebug("OnReCaptchaExpired");
    }

    public override void OnReCaptchaSuccess(string response_code)
    {
        user_registration_obj.ResponseReCAPTCHA = response_code;
    }

    public override void OnReCaptchaFailure(string response_code)
    {
        Logger.LogError($"OnReCaptchaFailure! response code: {response_code}");
    }

    private async Task HandleValidSubmit()
    {
        InRestProgress = true;
        await SessionLocalStorage.RemoveSessionAsync();
        ApiResponse<AuthUserResultModel> auth_result = await UsersAuthService.RegistrationNewUser(user_registration_obj);
        user_registration_result = auth_result?.Content;

        if (user_registration_result?.IsSuccess == true)
        {
            SessionMarker.Reload(user_registration_result.SessionMarker.Login, user_registration_result.SessionMarker.AccessLevelUser, user_registration_result.SessionMarker.Token);
            await SessionLocalStorage.SaveSessionAsync(user_registration_result.SessionMarker);
        }
        InRestProgress = false;
        authState.StateChanged();
    }
}