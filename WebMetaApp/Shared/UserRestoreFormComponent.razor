@using MetaLib.Models
@using Refit
@using Microsoft.Extensions.Logging
@using MetaLib
@using Microsoft.Extensions.Options
@using MetaLib.Services
@using MetaLib.Models.enums
@using MetaLib.ClientServices.refit
@inherits BlazorReCaptchaComponentBaseModel

@inject CustomAuthStateProvider authState
@inject IClientSession SessionLocalStorage
@inject SessionMarkerLiteModel SessionMarker
@inject IUsersAuthRefitService usersAuthRefitService
@inject ILogger<UserRestoreFormComponent> Logger
@inject ClientConfigModel Config

<h4>Запрос восстановления доступа!</h4>
@if (user_restore_result is null)
{
    <div class="alert alert-info" role="alert">
        Если вы забыли логин и/или пароль, запросите токен восстановления доступа. На ваш Email будет выслан ваш логин и токен сброса пароля.
    </div>
}
<hr />
@if (user_restore_result is null)
{
    <EditForm Model="@user_restore_obj" OnValidSubmit="@HandleValidSubmit">
        <fieldset disabled="@IsBusyProgress">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="mb-3">
                <label class="form-label" for="login">Login</label>
                <InputText class="form-control" id="login" aria-describedby="loginHelp" @bind-Value="user_restore_obj.Login" />
                <div class="form-text" id="loginHelp">Enter your login</div>
            </div>
            <div class="mb-3">
                и/или
            </div>
            <div class="mb-3">
                <label class="form-label" for="email">Email</label>
                <InputText type="email" class="form-control" id="email" aria-describedby="emailHelp" @bind-Value="user_restore_obj.Email" />
                <div class="form-text" id="emailHelp">Enter your email</div>
            </div>
            <ReCAPTCHAComponent ReCaptchaExpiredCallback="@OnReCaptchaExpired" ReCaptchaSuccessCallback="@OnReCaptchaSuccess" />
            <div class="alert alert-secondary" role="alert">Нет учётной записи? <a class="@PrimaryButtonClass(BootstrapColorsStylesEnum.Primary)" style="@PrimaryButtonStyle" href=@($"/{GlobalStaticConstants.AUTHENTICATION_CONTROLLER_NAME}/{GlobalStaticConstants.REGISTRATION_ACTION_NAME}")>Регистрация!</a></div>
            <button class="btn btn-primary" type="submit" disabled="@IsBusyProgress">
                @{
                    if (IsBusyProgress == true)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <text> Загрузка...</text>
                    }
                    else
                    {
                        <text>Отправить</text>
                    }
                }
            </button>
            @{
                if (!string.IsNullOrWhiteSpace(user_restore_result?.Message))
                {
                    <p></p>
                    <div class="alert alert-primary" role="alert">
                        @user_restore_result.Message
                    </div>
                    <a href="#" onclick="@(()=>{user_restore_result.Message = string.Empty;})">Повторить</a>
                }
            }
        </fieldset>
    </EditForm>
}
else
{
    <div class="alert alert-primary" role="alert">
        @user_restore_result.Message
    </div>
}
@code {
    private UserRestoreModel user_restore_obj = new();
    ResponseBaseModel? user_restore_result = null;

    public override void OnReCaptchaExpired() { user_restore_obj.ResponseReCAPTCHA = string.Empty; Logger.LogDebug(nameof(OnReCaptchaExpired)); }
    public override void OnReCaptchaSuccess(string response_code) { user_restore_obj.ResponseReCAPTCHA = response_code; Logger.LogDebug(nameof(OnReCaptchaSuccess)); }
    public override void OnReCaptchaFailure(string response_code) { Logger.LogError($"{nameof(OnReCaptchaFailure)}! response code: {response_code}"); }

    private async Task HandleValidSubmit()
    {
        IsBusyProgress = true;
        user_restore_result = await usersAuthRefitService.LogOutUserAsync();

        if (!user_restore_result.IsSuccess)
        {
            if (!string.IsNullOrEmpty(user_restore_result.Message))
                Logger.LogError(user_restore_result.Message);
            else
                Logger.LogError($"Ошибка API: {nameof(usersAuthRefitService.LogOutUserAsync)}");
        }

        authState.AuthenticationStateChanged();
        IsBusyProgress = false;
    }
}