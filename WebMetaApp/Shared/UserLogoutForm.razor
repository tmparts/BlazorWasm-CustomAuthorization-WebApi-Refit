@using LibMetaApp.Models
@using Refit
@using Microsoft.Extensions.Logging
@using LibMetaApp
@inherits LibMetaApp.Services.BlazorBusyComponentBaseModel

@inject CustomAuthStateProvider authState
@inject ISessionLocalStorage SessionLocalStorage
@inject SessionMarkerLiteModel SessionMarker
@inject LibMetaApp.Services.IUsersAuthApi UsersAuthService
@inject ILogger<UserLogoutForm> Logger

<h3>Выход</h3>
<button class="btn btn-primary" onclick="@LogoutAsync" disabled="@IsBusyProgress">
    @{
        if (IsBusyProgress == true)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <text> Загрузка...</text>
        }
        else
        {
            <text>Подтверить выход из сессии</text>
        }
    }
</button>
@code {
    ResultRequestModel? res = null;

    private async Task LogoutAsync()
    {
        IsBusyProgress = true;
        try
        {
            ApiResponse<ResultRequestModel> rest = await UsersAuthService.LogOutUser();
            await SessionLocalStorage.RemoveSessionAsync();
            if (rest.StatusCode != System.Net.HttpStatusCode.OK)
            {
                Logger.LogError($"HTTP error: [code={rest.StatusCode}] {rest?.Error?.Content}");
                IsBusyProgress = false;
                return;
            }
            res = rest?.Content;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error - {nameof(UsersAuthService.LogOutUser)}");            
        }

        SessionMarker.Reload(string.Empty, AccessLevelsUsersEnum.Anonim, string.Empty);
        await SessionLocalStorage.SaveSessionAsync(SessionMarker);
        
        authState.AuthenticationStateChanged();
        IsBusyProgress = false;
    }
}
