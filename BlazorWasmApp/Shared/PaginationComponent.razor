@using SharedLib.Models

<nav aria-label="Page navigation example">
    @{
        string ul_css = "pagination-";
        switch (Size)
        {
            case SizingsSimpleEnum.Lg:
                ul_css += "lg";
                break;
            case SizingsSimpleEnum.Sm:
                ul_css += "sm";
                break;
            default:
                ul_css = string.Empty;
                break;
        }

        string align_pagination = "justify-content-";
        switch (Alignment)
        {
            case HorizontalAlignmentsEnum.Center:
                align_pagination += "center";
                break;
            case HorizontalAlignmentsEnum.Right:
                align_pagination += "end";
                break;
            default:
                align_pagination = string.Empty;
                break;
        }

        ul_css = $"pagination {$"{ul_css} {align_pagination}".Trim()}".Trim();
    }
    <ul class="@ul_css">
        <li class="page-item@(PageNum == 1 ? " disabled" : "")">
            <a class="page-link" href="@($"{BaseUrlTemplate}?{nameof(PageNum)}={PageNum - 1}&{nameof(PageSize)}={PageSize}")" aria-label="Previous">
                <span aria-hidden="true">&laquo;</span>
            </a>
        </li>
        @for (uint i = 1; TotalPagesCount >= i; i++)
        {
            if (TotalPagesCount > 7)
            {
                if (PageNum < 5)
                {
                    if (i == TotalPagesCount - 1)
                    {
                        <li class="page-item disabled"><span class="page-link">⁞</span></li>
                        @*await Component.InvokeAsync(nameof(brPaginationButton), new { buttonSet = new bmPaginationButton() { TypeButton = bmPaginationButton.PaginationTypesButton.Separator, Title = "⁞" } });*@
                    }
                    else if (i <= 5 || i == TotalPagesCount)
                    {
                        <li class="page-item@(PageNum == i ? " active" : "")"><a class="page-link" href="@($"{BaseUrlTemplate}?{nameof(PageNum)}={i}&{nameof(PageSize)}={PageSize}")">@i</a></li>
                        @*await Component.InvokeAsync(nameof(brPaginationButton), new { buttonSet = new bmPaginationButton() { TypeButton = bmPaginationButton.PaginationTypesButton.Numb, Title = i.ToString(), Href = Model.UrlTmpl + i.ToString(), IsActive = (PageNum == i) } });*@
                    }
                    else
                    {
                        continue;
                    }
                }
                else if (PageNum > (TotalPagesCount - 4))
                {
                    if (i == 2)
                    {
                        <li class="page-item disabled"><span class="page-link">⁞</span></li>
                        @*await Component.InvokeAsync(nameof(brPaginationButton), new { buttonSet = new bmPaginationButton() { TypeButton = bmPaginationButton.PaginationTypesButton.Separator, Title = "⁞" } });*@
                    }
                    else if (i == 1 || i >= (TotalPagesCount - 4))
                    {
                        <li class="page-item@(PageNum == i ? " active" : "")"><a class="page-link" href="@($"{BaseUrlTemplate}?{nameof(PageNum)}={i}&{nameof(PageSize)}={PageSize}")">@i</a></li>
                        @*await Component.InvokeAsync(nameof(brPaginationButton), new { buttonSet = new bmPaginationButton() { TypeButton = bmPaginationButton.PaginationTypesButton.Numb, Title = i.ToString(), Href = Model.UrlTmpl + i.ToString(), IsActive = (PageNum == i) } });*@
                    }
                    else
                    {
                        continue;
                    }
                }
                else
                {
                    if (i == 2 || i == TotalPagesCount - 1)
                    {
                        <li class="page-item disabled"><span class="page-link">⁞</span></li>
                        @*await Component.InvokeAsync(nameof(brPaginationButton), new { buttonSet = new bmPaginationButton() { TypeButton = bmPaginationButton.PaginationTypesButton.Separator, Title = "⁞" } });*@
                    }
                    else if ((i == 1 || i == TotalPagesCount) || (i == PageNum - 1 || i == PageNum || i == PageNum + 1))
                    {
                        <li class="page-item@(PageNum == i ? " active" : "")"><a class="page-link" href="@($"{BaseUrlTemplate}?{nameof(PageNum)}={i}&{nameof(PageSize)}={PageSize}")">@i</a></li>
                        @*await Component.InvokeAsync(nameof(brPaginationButton), new { buttonSet = new bmPaginationButton() { TypeButton = bmPaginationButton.PaginationTypesButton.Numb, Title = i.ToString(), Href = Model.UrlTmpl + i.ToString(), IsActive = (PageNum == i) } });*@
                    }
                    else
                    {
                        continue;
                    }
                }
            }
            else
            {
                <li class="page-item@(PageNum == i ? " active" : "")"><a class="page-link" href="@($"{BaseUrlTemplate}?{nameof(PageNum)}={i}&{nameof(PageSize)}={PageSize}")">@i</a></li>
                @*await Component.InvokeAsync(nameof(brPaginationButton), new { buttonSet = new bmPaginationButton() { TypeButton = bmPaginationButton.PaginationTypesButton.Numb, Title = i.ToString(), Href = Model.UrlTmpl + i.ToString(), IsActive = (Model.PageNum == i) } });*@
            }
        }

        <li class="page-item@(PageNum == TotalPagesCount ? " disabled" : "")">
            <a class="page-link" href="@($"{BaseUrlTemplate}?{nameof(PageNum)}={PageNum + 1}&{nameof(PageSize)}={PageSize}")" aria-label="Next">
                <span aria-hidden="true">&raquo;</span>
            </a>
        </li>
    </ul>
</nav>

@code {
    uint TotalPagesCount => (uint)Math.Ceiling((double)(AllRowsCount / PageSize));
    [Parameter] public int PageSize { get; set; } = 10;
    [Parameter] public int PageNum { get; set; } = 1;
    [Parameter] public int AllRowsCount { get; set; } = 0;
    [Parameter] public string BaseUrlTemplate { get; set; }
    [Parameter] public HorizontalAlignmentsEnum Alignment { get; set; } = HorizontalAlignmentsEnum.Right;
    [Parameter] public SizingsSimpleEnum Size { get; set; } = SizingsSimpleEnum.Norm;
}

