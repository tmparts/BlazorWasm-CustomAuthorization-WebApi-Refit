@page "/projects/list"

@using SharedLib.Models
@using SharedLib.Services
@using SharedLib.ClientServices.refit
@using Microsoft.AspNetCore.Components.Routing
@using System.Collections.Specialized

@inject NavigationManager navigationManager
@inject IUsersProjectsRestService usersProjectsRefitService
@inject ILogger<ProjectsListPage> Logger
@inject ClientConfigModel conf

@inherits PaginationBaseModel

<style>
    .projects-table tr a {
        display: block;
    }

    .is-delete {
        text-decoration: line-through;
    }
</style>

<div class="card">
    @if (IsBusyProgress == true)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Загрузка...</span>
            </div>
        </div>
    }
    else
    {
        <div class="card-body">
            <nav class="navbar navbar-light bg-light">
                <div class="container-fluid">
                    <a class="navbar-brand">Проекты</a>
                    <form class="d-flex">
                        <a class="btn btn-outline-primary" href="@GlobalStaticConstants.PROJECTS_CONTROLLER_NAME/@GlobalStaticConstants.EDIT_ACTION_NAME/" role="button">Создать</a>
                    </form>
                </div>
            </nav>
            <hr />
            @if (UsersProjects.RowsData.Any())
            {
                <DataTableComponent DataTable="@userProjectsDataTable" TotalRowsCount="@(UsersProjects.TotalRowsCount)" PageNum="@(UsersProjects.PageNum)" PageSize="@(UsersProjects.PageSize)" />
            }
            else
            {
                <p class="card-text">У вас нет ни одного проекта. Создайте новый проект.</p>
            }

        </div>
        <ModalWindowComponent @ref="Modal">
            <p>@ModalBodyText</p>
        </ModalWindowComponent>
    }
</div>

@code {
    ProjectForUserResponseModel UsersProjects = new ProjectForUserResponseModel() { RowsData = Array.Empty<ProjectForUserModel>() };
    UserProjectsDataTableProvider userProjectsDataTable => new UserProjectsDataTableProvider(UsersProjects, $"{GlobalStaticConstants.PROJECTS_CONTROLLER_NAME}");

    private ModalWindowComponent Modal { get; set; }
    private string ModalBodyText { get; set; } = string.Empty;

    protected override async void OnInitialized()
    {
        navigationManager.LocationChanged += HandleLocationChanged;
        base._conf = conf;
        base.OnInitialized();
        await Rest();
    }

    private async Task Rest()
    {
        IsBusyProgress = true;

        FindUsersProjectsResponseModel rest = await usersProjectsRefitService.GetMyProjectsAsync(Pagination);
        if (!rest.IsSuccess)
        {
            if (!string.IsNullOrEmpty(rest.Message))
                Logger.LogError(rest.Message);
            else
                Logger.LogError($"Ошибка API: {nameof(usersProjectsRefitService.GetMyProjectsAsync)}");
        }
        else
        {
            UsersProjects = rest.Projects;
        }

        IsBusyProgress = false;
        StateHasChanged();
    }

    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        Uri uri = new Uri(e.Location);
        if (uri.LocalPath != $"/{GlobalStaticConstants.PROJECTS_CONTROLLER_NAME}/{GlobalStaticConstants.LIST_ACTION_NAME}")
            return;
        string query = uri.Query;
        if (string.IsNullOrWhiteSpace(query))
            return;

        NameValueCollection parsed_query = System.Web.HttpUtility.ParseQueryString(query);
        string s_page_num = parsed_query.Get(nameof(PaginationRequestModel.PageNum));
        if (int.TryParse(s_page_num, out int i_page_num))
        {
            PageNum = i_page_num;
        }

        string s_page_size = parsed_query.Get(nameof(PaginationRequestModel.PageSize));
        if (int.TryParse(s_page_size, out int i_page_size))
        {
            PageSize = i_page_size;
        }
        Rest();
    }

    public override void Dispose()
    {
        navigationManager.LocationChanged -= HandleLocationChanged;
    }
}